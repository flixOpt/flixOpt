[build-system]
requires = ["setuptools>=61.0.0", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "flixOpt"
dynamic = ["version"]
description = "Vector based energy and material flow optimization framework in Python."
readme = "README.md"
requires-python = ">=3.10, <3.13"
license = { text = "MIT License" }
authors = [
    { name = "Felix Bumann", email = "felixbumann387@gmail.com" },
    { name = "Felix Panitz", email = "baumbude@googlemail.com" },
    { name = "Peter Stange", email = "peter.stange@tu-dresden.de" }
]
maintainers = [
    { name = "Chair of Building Energy Systems and Heat Supply, TU Dresden", email = "peter.stange@tu-dresden.de" }
]
keywords = ["optimization", "energy systems", "numerical analysis"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Mathematics :: Numerical Analysis :: Optimization",
    "Topic :: Software Development :: Libraries :: Python"
]
dependencies = [
    "numpy >= 1.21.5, < 2",
    "PyYAML >= 6.0",
    "Pyomo >= 6.4.2",
    "rich >= 13.0.1",
    "tsam >= 2.3.1",  # Used for time series aggregation
    "highspy >= 1.5.3",  # Default solver
    "pandas >= 2, < 3",  # Used in post-processing
    "matplotlib >= 3.5.2",  # Used in post-processing
    "plotly >= 5.15",  # Used in post-processing
    "tomli >= 2.0.1"  # TOML parser (only needed until python 3.11)
]

[project.optional-dependencies]
dev = [
    "pytest",
    "ruff"
]

visualization = [
    "pyvis == 0.3.1",  # Used for visualizing the FLowSystem
]

[project.urls]
homepage = "https://tu-dresden.de/ing/maschinenwesen/iet/gewv/forschung/forschungsprojekte/flixopt"
repository = "https://github.com/flixOpt/flixOpt"

[tool.setuptools.packages.find]
where = ["."]
exclude = ["tests", "docs", "examples", "examples.*", "Tutorials", ".git", ".vscode", "build", ".venv", "venv/"]

[tool.setuptools.package-data]
"flixOpt" = ["config.yaml"]

[tool.setuptools_scm]
version_scheme = "post-release"

[tool.ruff]
# Files or directories to exclude (e.g., virtual environments, cache, build artifacts)
exclude = [
    "venv",  # Virtual environments
    "build",  # Build artifacts
    "dist",  # Distribution files
    "__pycache__",  # Bytecode cache
    ".git",  # Git folder
    ".mypy_cache",  # MyPy cache
]

line-length = 120

[tool.ruff.lint]
select = ["E", "F", "W", "I", "B", "N"]  # Enable linting rules by category (e.g., error, warnings, unused imports)
ignore = [  # Ignore specific rules
    "E501",  # Ignore line-length checks (use Black for formatting)
    "F401",  # Allow unused imports in some cases (use __all__)
    "N813",  # Allow importing of flixOpt as fx (lowercase)
    "N999",  # Allow module Name flixOpt
]
extend-fixable = ["B"]   # Enable fix for flake8-bugbear (`B`), on top of any rules specified by `fixable`.

# Apply rule exceptions to specific files or directories
[tool.ruff.lint.per-file-ignores]
"tests/*.py" = ["S101"]  # Ignore assertions in test files
"tests/test_integration.py" = ["N806"]  # Ignore NOT lowercase names in test files
"flixOpt/linear_converters.py" = ["N803"]  # Parameters with NOT lowercase names

[tool.ruff.format]
quote-style = "single"
indent-style = "space"
docstring-code-format = true
